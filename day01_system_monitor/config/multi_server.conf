#!/bin/bash
# multi_server_monitor.sh - Fixed version

# Simulate different server types
declare -A SERVERS=(
    ["web-server-1"]="healthy"
    ["web-server-2"]="warning" 
    ["database-1"]="critical"
    ["api-server-1"]="healthy"
    ["cache-server-1"]="warning"
)

# Thresholds
CPU_THRESHOLD=80
MEMORY_THRESHOLD=85
DISK_THRESHOLD=90

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

# Create logs directory if it doesn't exist
mkdir -p logs

# Function to simulate server metrics
simulate_server_metrics() {
    local server_name=$1
    local status=$2
    
    case $status in
        "healthy")
            cpu=$((RANDOM % 60 + 10))      # 10-70%
            memory=$((RANDOM % 50 + 20))   # 20-70%
            disk=$((RANDOM % 40 + 30))     # 30-70%
            ;;
        "warning")
            cpu=$((RANDOM % 15 + 70))      # 70-85%
            memory=$((RANDOM % 15 + 75))   # 75-90%
            disk=$((RANDOM % 15 + 75))     # 75-90%
            ;;
        "critical")
            cpu=$((RANDOM % 20 + 80))      # 80-100%
            memory=$((RANDOM % 20 + 80))   # 80-100%
            disk=$((RANDOM % 20 + 80))     # 80-100%
            ;;
    esac
    
    echo "$cpu,$memory,$disk"
}

# Function to get status color
get_status_color() {
    local cpu=$1
    local memory=$2
    local disk=$3
    
    if [[ $cpu -ge $CPU_THRESHOLD || $memory -ge $MEMORY_THRESHOLD || $disk -ge $DISK_THRESHOLD ]]; then
        if [[ $cpu -ge 90 || $memory -ge 90 || $disk -ge 90 ]]; then
            echo "CRITICAL"
        else
            echo "WARNING"
        fi
    else
        echo "HEALTHY"
    fi
}

# Function to monitor single server
monitor_server() {
    local server=$1
    local preset_status=$2
    
    echo -e "${BLUE}Connecting to $server...${NC}"
    sleep 0.5  # Simulate connection time
    
    # Simulate getting metrics
    metrics=$(simulate_server_metrics "$server" "$preset_status")
    IFS=',' read -r cpu memory disk <<< "$metrics"
    
    # Determine status
    status=$(get_status_color "$cpu" "$memory" "$disk")
    
    # Color based on status
    case $status in
        "HEALTHY")  color=$GREEN ;;
        "WARNING")  color=$YELLOW ;;
        "CRITICAL") color=$RED ;;
    esac
    
    # Output results
    echo -e "${color}[$status]${NC} $server"
    echo "  CPU: ${cpu}% | Memory: ${memory}% | Disk: ${disk}%"
    echo "  Uptime: $((RANDOM % 100 + 1)) days"
    echo ""
    
    # Return status for summary (this was the issue)
    echo "$server,$status,$cpu,$memory,$disk" >> /tmp/monitoring_results.tmp
}

# Function to generate summary report
generate_summary() {
    local healthy=0 warning=0 critical=0
    
    echo -e "${BLUE}=== MONITORING SUMMARY ===${NC}"
    echo "Timestamp: $(date)"
    echo ""
    
    # Read results from temp file
    if [[ -f /tmp/monitoring_results.tmp ]]; then
        while IFS=',' read -r server status cpu memory disk; do
            case $status in
                "HEALTHY")  ((healthy++)) ;;
                "WARNING")  ((warning++)) ;;
                "CRITICAL") ((critical++)) ;;
            esac
        done < /tmp/monitoring_results.tmp
    fi
    
    echo -e "${GREEN}Healthy Servers: $healthy${NC}"
    echo -e "${YELLOW}Warning Servers: $warning${NC}"
    echo -e "${RED}Critical Servers: $critical${NC}"
    echo ""
    echo "Total Servers Monitored: ${#SERVERS[@]}"
    
    # Generate detailed report
    local report_file="logs/multi_server_$(date +%Y%m%d_%H%M%S).log"
    {
        echo "=== Multi-Server Monitoring Report ==="
        echo "Generated: $(date)"
        echo ""
        echo "Summary:"
        echo "Healthy: $healthy, Warning: $warning, Critical: $critical"
        echo ""
        echo "Detailed Results:"
        if [[ -f /tmp/monitoring_results.tmp ]]; then
            cat /tmp/monitoring_results.tmp
        fi
    } > "$report_file"
    
    echo "Report saved to $report_file"
    
    # Cleanup temp file
    rm -f /tmp/monitoring_results.tmp
}

# Main monitoring function
main() {
    echo -e "${BLUE}=== MULTI-SERVER MONITORING DASHBOARD ===${NC}"
    echo "Starting monitoring of ${#SERVERS[@]} servers..."
    echo ""
    
    # Clear any existing temp file
    rm -f /tmp/monitoring_results.tmp
    
    # Monitor each server
    for server in "${!SERVERS[@]}"; do
        monitor_server "$server" "${SERVERS[$server]}"
    done
    
    # Generate summary
    generate_summary
}

# Run the monitoring
main "$@"
